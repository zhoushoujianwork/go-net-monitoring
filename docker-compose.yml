version: '3.8'

services:
  # Redis 数据库 (推荐的存储方式)
  redis:
    image: redis:7-alpine
    container_name: netmon-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    restart: unless-stopped
    networks:
      - netmon

  # 网络监控服务器 (默认使用 Redis 存储)
  server:
    image: zhoushoujian/go-net-monitoring:latest
    container_name: netmon-server
    environment:
      - COMPONENT=server
      - REDIS_HOST=redis
    ports:
      - "8080:8080"
    volumes:
      - ./configs/server-redis.yaml:/app/configs/server.yaml:ro
      - ./data:/app/data
      - ./logs:/app/logs
    command: ["server", "-c", "/app/configs/server.yaml"]
    depends_on:
      - redis
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - netmon

  # 网络监控服务器 (内存存储模式，作为备选)
  server-memory:
    image: zhoushoujian/go-net-monitoring:latest
    container_name: netmon-server-memory
    environment:
      - COMPONENT=server
    ports:
      - "8081:8080"
    volumes:
      - ./configs/server.yaml:/app/configs/server.yaml:ro
      - ./data:/app/data
      - ./logs:/app/logs
    command: ["server", "-c", "/app/configs/server.yaml"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    networks:
      - netmon
    profiles:
      - memory

  # 网络监控代理
  agent:
    image: zhoushoujian/go-net-monitoring:latest
    container_name: netmon-agent
    environment:
      - COMPONENT=agent
    depends_on:
      - server
    network_mode: host  # 需要访问主机网络接口
    privileged: true    # 需要特权模式进行网络监控
    volumes:
      - ./configs/agent.yaml:/app/configs/agent.yaml:ro
      - ./logs:/app/logs
    command: ["agent", "-c", "/app/configs/agent.yaml"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "pgrep", "agent"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # Prometheus 监控 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: netmon-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./docker/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - netmon
    profiles:
      - monitoring

  # Grafana 仪表板 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: netmon-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
    volumes:
      - grafana_data:/var/lib/grafana
      - ./docker/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./docker/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    restart: unless-stopped
    networks:
      - netmon
    profiles:
      - monitoring

networks:
  netmon:
    driver: bridge

volumes:
  redis_data:
  prometheus_data:
  grafana_data:
