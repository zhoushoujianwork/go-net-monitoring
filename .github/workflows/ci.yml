name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  GO_VERSION: '1.21'
  DOCKER_REGISTRY: zhoushoujian
  IMAGE_NAME: go-net-monitoring

jobs:
  # 代码质量检查
  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run go fmt
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted:"
          gofmt -s -l .
          exit 1
        fi
    
    - name: Run go vet
      run: go vet ./...
    
    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v3
      with:
        version: latest

  # 单元测试
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcap-dev
        go mod download
    
    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  # 构建测试
  build:
    name: Build Test
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcap-dev
        go mod download
    
    - name: Build binaries
      run: |
        mkdir -p bin
        CGO_ENABLED=1 GOOS=linux go build -o bin/agent ./cmd/agent
        CGO_ENABLED=0 GOOS=linux go build -o bin/server ./cmd/server
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries
        path: bin/

  # Docker构建和测试
  docker:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build \
          --build-arg VERSION=${{ github.sha }} \
          --build-arg BUILD_TIME=$(date -u +"%Y-%m-%dT%H:%M:%SZ") \
          --build-arg GIT_COMMIT=${{ github.sha }} \
          --tag ${{ env.IMAGE_NAME }}:test \
          .
    
    - name: Test Docker image
      run: |
        # 测试server组件
        docker run --rm -e COMPONENT=server ${{ env.IMAGE_NAME }}:test --version
        
        # 测试agent组件  
        docker run --rm -e COMPONENT=agent ${{ env.IMAGE_NAME }}:test --version
    
    - name: Run integration tests
      run: |
        # 启动测试环境
        docker-compose -f docker-compose.test.yml up -d
        
        # 等待服务启动
        sleep 30
        
        # 健康检查
        curl -f http://localhost:8080/health || exit 1
        
        # 检查指标端点
        curl -f http://localhost:8080/metrics || exit 1
        
        # 清理
        docker-compose -f docker-compose.test.yml down

  # 安全扫描
  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.IMAGE_NAME }}:test'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # 发布Docker镜像
  publish:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: [test, docker, security]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.DOCKER_REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        build-args: |
          VERSION=${{ github.sha }}
          BUILD_TIME=${{ steps.meta.outputs.labels }}
          GIT_COMMIT=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # 发布Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: publish
    if: github.event_name == 'release'
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libpcap-dev
    
    - name: Build release binaries
      run: |
        mkdir -p dist
        
        # Linux AMD64
        CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build -o dist/agent-linux-amd64 ./cmd/agent
        CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -o dist/server-linux-amd64 ./cmd/server
        
        # Linux ARM64
        CGO_ENABLED=1 GOOS=linux GOARCH=arm64 go build -o dist/agent-linux-arm64 ./cmd/agent
        CGO_ENABLED=0 GOOS=linux GOARCH=arm64 go build -o dist/server-linux-arm64 ./cmd/server
        
        # macOS AMD64
        CGO_ENABLED=1 GOOS=darwin GOARCH=amd64 go build -o dist/agent-darwin-amd64 ./cmd/agent
        CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build -o dist/server-darwin-amd64 ./cmd/server
        
        # macOS ARM64
        CGO_ENABLED=1 GOOS=darwin GOARCH=arm64 go build -o dist/agent-darwin-arm64 ./cmd/agent
        CGO_ENABLED=0 GOOS=darwin GOARCH=arm64 go build -o dist/server-darwin-arm64 ./cmd/server
    
    - name: Create release archives
      run: |
        cd dist
        for file in *; do
          if [[ $file == *"linux"* ]]; then
            tar -czf "${file}.tar.gz" "$file"
          elif [[ $file == *"darwin"* ]]; then
            tar -czf "${file}.tar.gz" "$file"
          fi
        done
    
    - name: Upload release assets
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*.tar.gz
        generate_release_notes: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # 部署通知
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    needs: [publish, release]
    if: always()
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.publish.result }}" == "success" ]; then
          echo "✅ Docker镜像发布成功"
        else
          echo "❌ Docker镜像发布失败"
        fi
        
        if [ "${{ needs.release.result }}" == "success" ]; then
          echo "✅ Release创建成功"
        else
          echo "❌ Release创建失败"
        fi
