name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        default: 'v1.0.0'

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.19'
    
    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        fi
    
    - name: Build release binaries
      run: |
        chmod +x scripts/build-release.sh
        ./scripts/build-release.sh ${{ steps.version.outputs.VERSION }}
    
    - name: Generate checksums
      run: |
        cd dist
        sha256sum *.tar.gz > checksums.txt
        cat checksums.txt
    
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.VERSION }}
        release_name: Release ${{ steps.version.outputs.VERSION }}
        body: |
          ## 🚀 Go Network Monitoring ${{ steps.version.outputs.VERSION }}
          
          ### 📦 一键安装
          
          **安装 Agent:**
          ```bash
          curl -sS https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/quick-install.sh | bash -s agent
          ```
          
          **安装 Server:**
          ```bash
          curl -sS https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/quick-install.sh | bash -s server
          ```
          
          **交互式安装:**
          ```bash
          curl -sS https://raw.githubusercontent.com/${{ github.repository }}/main/scripts/quick-install.sh | bash
          ```
          
          ### 📋 支持的平台
          - Linux (amd64, arm64)
          - macOS (amd64, arm64)
          
          ### 🔧 手动安装
          1. 下载对应平台的压缩包
          2. 解压到目标目录
          3. 配置并运行
          
          ### 📊 主要功能
          - 实时网络流量监控
          - 按域名统计访问次数和流量
          - Prometheus 指标导出
          - 智能过滤规则
          - Agent/Server 分布式架构
          
          ### 📖 文档
          - [README](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [配置说明](https://github.com/${{ github.repository }}/blob/main/docs/configuration.md)
          - [部署指南](https://github.com/${{ github.repository }}/blob/main/docs/deployment.md)
        draft: false
        prerelease: false
    
    - name: Upload Release Assets
      run: |
        for file in dist/*.tar.gz dist/checksums.txt; do
          if [ -f "$file" ]; then
            echo "Uploading $file..."
            curl -X POST \
              -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/octet-stream" \
              --data-binary @"$file" \
              "${{ steps.create_release.outputs.upload_url }}?name=$(basename $file)"
          fi
        done
    
    - name: Update webinstall.dev
      run: |
        echo "🚀 Release ${{ steps.version.outputs.VERSION }} created successfully!"
        echo "📦 Assets uploaded to GitHub Releases"
        echo "🌐 Update webinstall.dev packages if needed"
